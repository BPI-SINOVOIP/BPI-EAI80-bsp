
/* auto-generated by gen_syscalls.py, don't edit */

#ifndef _ASMLANGUAGE

#include <syscall_list.h>
#include <syscall_macros.h>

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_UART_ERR_CHECK, uart_err_check, int, struct device *, dev);

K_SYSCALL_DECLARE2(K_SYSCALL_UART_POLL_IN, uart_poll_in, int, struct device *, dev, unsigned char *, p_char);

K_SYSCALL_DECLARE2(K_SYSCALL_UART_POLL_OUT, uart_poll_out, unsigned char, struct device *, dev, unsigned char, out_char);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_ENABLE, uart_irq_tx_enable, struct device *, dev);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_DISABLE, uart_irq_tx_disable, struct device *, dev);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_ENABLE, uart_irq_rx_enable, struct device *, dev);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_DISABLE, uart_irq_rx_disable, struct device *, dev);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_ERR_ENABLE, uart_irq_err_enable, struct device *, dev);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_ERR_DISABLE, uart_irq_err_disable, struct device *, dev);

K_SYSCALL_DECLARE1(K_SYSCALL_UART_IRQ_IS_PENDING, uart_irq_is_pending, int, struct device *, dev);

K_SYSCALL_DECLARE1(K_SYSCALL_UART_IRQ_UPDATE, uart_irq_update, int, struct device *, dev);

K_SYSCALL_DECLARE3(K_SYSCALL_UART_LINE_CTRL_SET, uart_line_ctrl_set, int, struct device *, dev, u32_t, ctrl, u32_t, val);

K_SYSCALL_DECLARE3(K_SYSCALL_UART_LINE_CTRL_GET, uart_line_ctrl_get, int, struct device *, dev, u32_t, ctrl, u32_t *, val);

K_SYSCALL_DECLARE3(K_SYSCALL_UART_DRV_CMD, uart_drv_cmd, int, struct device *, dev, u32_t, cmd, u32_t, p);

#ifdef __cplusplus
}
#endif

#endif
