
/* auto-generated by gen_syscalls.py, don't edit */

#ifndef _ASMLANGUAGE

#include <syscall_list.h>
#include <syscall_macros.h>

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_RTC_READ, rtc_read, int, struct device *, dev);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_RTC_ENABLE, rtc_enable, struct device *, dev);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_RTC_DISABLE, rtc_disable, struct device *, dev);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_RTC_REINIT, rtc_reinit, struct device *, dev);

K_SYSCALL_DECLARE2(K_SYSCALL_RTC_SET_ALARM, rtc_set_alarm, int, struct device *, dev, const rtc_datetime *, rdt);

K_SYSCALL_DECLARE1(K_SYSCALL_RTC_GET_PENDING_INT, rtc_get_pending_int, int, struct device *, dev);

K_SYSCALL_DECLARE2(K_SYSCALL_RTC_SET_DATETIME, rtc_set_datetime, int, struct device *, dev, rtc_datetime *, rdt);

K_SYSCALL_DECLARE1(K_SYSCALL_RTC_GET_TIME, rtc_get_time, rtc_datetime*, struct device *, dev);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_RTC_STOP_TIMER, rtc_stop_timer, struct device *, dev);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_RTC_CANCEL_ALARM, rtc_cancel_alarm, struct device *, dev);

K_SYSCALL_DECLARE2(K_SYSCALL_RTC_START_TIMER, rtc_start_timer, int, struct device *, dev, const rtc_timer *, rt);

#ifdef __cplusplus
}
#endif

#endif
